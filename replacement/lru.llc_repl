#include "cache.h"
#include <inttypes.h>
#include <vector>
#include <bits/stdc++.h>
#define MAX_REUSE_DIST 8000
#define MAX_ACCESS_COUNT 8000
#define MAX_MISSES_COUNT 8000

struct access {
    uint64_t full_addr;
    uint32_t type;
};

#ifdef TRACE_LLC
FILE *outfile_llc;
#endif

#ifdef REUSE_LLC
FILE *reuse_csv_krn_llc;
FILE *reuse_csv_usr_llc;
vector <uint64_t> access_hist_llc[LLC_SET];
uint64_t reuse_dist_krn_llc[MAX_REUSE_DIST];
uint64_t reuse_dist_usr_llc[MAX_REUSE_DIST];
unordered_map <uint64_t, uint64_t> access_map_llc;
uint64_t curr_index_llc[LLC_SET];
#endif

#ifdef ACCESS_COUNT_LLC
FILE *access_blocks_csv_llc_krn;
FILE *access_blocks_csv_llc_usr;
unordered_map <uint64_t, uint64_t> access_count_llc_krn;
unordered_map <uint64_t, uint64_t> access_count_llc_usr;
uint64_t access_blocks_llc_krn[MAX_ACCESS_COUNT];
uint64_t access_blocks_llc_usr[MAX_ACCESS_COUNT];
#endif

#ifdef MISSES_COUNT_LLC
FILE *misses_blocks_csv_llc_krn;
FILE *misses_blocks_csv_llc_usr;
unordered_map <uint64_t, uint64_t> misses_count_llc_krn;
unordered_map <uint64_t, uint64_t> misses_count_llc_usr;
uint64_t misses_blocks_llc_krn[MAX_MISSES_COUNT];
uint64_t misses_blocks_llc_usr[MAX_MISSES_COUNT];
#endif

// initialize replacement state
void CACHE::llc_initialize_replacement(char *tracefile)
{
    char outfilename[1024];
    char *last_slash = strrchr(tracefile, '/')+1;
    char * first_dot = strchr(tracefile, '.');
    char file[1024];
    snprintf(file, first_dot - last_slash - 5, "%s", last_slash);

#ifdef TRACE_LLC
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s.access", file);
    outfile_llc = fopen(outfilename, "wb");
    if (!outfile_llc) {
        perror("Error: ");
        assert(0);
    }
#endif

#ifdef REUSE_LLC
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s_krn.csv", file);
    reuse_csv_krn_llc = fopen(outfilename, "w");
    if (!reuse_csv_krn_llc) {
        perror("Error: ");
        assert(0);
    }
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s_usr.csv", file);
    reuse_csv_usr_llc = fopen(outfilename, "w");
    if (!reuse_csv_usr_llc) {
        perror("Error: ");
        assert(0);
    }
#endif

#ifdef ACCESS_COUNT_LLC
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s_access_krn.csv", file);
    access_blocks_csv_llc_krn = fopen(outfilename, "w");
    if (!access_blocks_csv_llc_krn) {
        perror("Error: ");
        assert(0);
    }
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s_access_usr.csv", file);
    access_blocks_csv_llc_usr = fopen(outfilename, "w");
    if (!access_blocks_csv_llc_usr) {
        perror("Error: ");
        assert(0);
    }
#endif

#ifdef MISSES_COUNT_LLC
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s_misses_krn.csv", file);
    misses_blocks_csv_llc_krn = fopen(outfilename, "w");
    if (!misses_blocks_csv_llc_krn) {
        perror("Error: ");
        assert(0);
    }
    snprintf(outfilename, 102, "/data/ndesh/UGP/cloudsuite_access/%s_misses_usr.csv", file);
    misses_blocks_csv_llc_usr = fopen(outfilename, "w");
    if (!misses_blocks_csv_llc_usr) {
        perror("Error: ");
        assert(0);
    }
#endif
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint64_t virtual_address, uint32_t type)
{
    // baseline LRU
    return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t virtual_address, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    uint64_t block_addr = (full_addr  >> LOG2_BLOCK_SIZE);

#ifdef REUSE_LLC
    if (type != WRITEBACK) {
        access_hist_llc[set].push_back(block_addr);
        curr_index_llc[set]++;

        if (access_map_llc.find(block_addr) != access_map_llc.end()) {
            access_hist_llc[set][access_map_llc[(block_addr)]] = (uint64_t)0;
            unsigned int curr_reuse = 0;
            for (uint64_t i = access_map_llc[(block_addr)]; i < curr_index_llc[set]-1; i++) {
                if (access_hist_llc[set].at(i) != 0)
                    curr_reuse += 1;
            }
            if (curr_reuse < MAX_REUSE_DIST) {
                if (virtual_address > 0xff00000000000000)
                    reuse_dist_krn_llc[curr_reuse]++;
                else
                    reuse_dist_usr_llc[curr_reuse]++;
            }
        }
        access_map_llc[(block_addr)] = curr_index_llc[set]-1;
    }
#endif

#ifdef ACCESS_COUNT_LLC
    if (type != WRITEBACK) {
        if (virtual_address > 0xff00000000000000) {
            if (access_count_llc_krn.find(block_addr) != access_count_llc_krn.end()) {
                access_count_llc_krn[block_addr] += 1;
            }
            else
                access_count_llc_krn[block_addr] = 1;
        } else {
            if (access_count_llc_usr.find(block_addr) != access_count_llc_usr.end()) {
                access_count_llc_usr[block_addr] += 1;
            }
            else
                access_count_llc_usr[block_addr] = 1;
        }
    }
#endif

#ifdef MISSES_COUNT_LLC
    if (type != WRITEBACK && !hit) {
        if (virtual_address > 0xff00000000000000) {
            if (misses_count_llc_krn.find(block_addr) != misses_count_llc_krn.end()) {
                misses_count_llc_krn[block_addr] += 1;
            }
            else
                misses_count_llc_krn[block_addr] = 1;

        } else {
            if (misses_count_llc_usr.find(block_addr) != misses_count_llc_usr.end()) {
                misses_count_llc_usr[block_addr] += 1;
            }
            else
                misses_count_llc_usr[block_addr] = 1;
        }
    }
#endif

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

#ifdef TRACE_LLC
    struct access curr;
    curr.full_addr = full_addr;
    curr.type = type;
    fwrite(&curr, sizeof(struct access), 1, outfile_llc);
#endif

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{
#ifdef ACCESS_COUNT_LLC
    // kernel access count
    for(auto it = access_count_llc_krn.begin(); it != access_count_llc_krn.end(); ++it) {
        if (it->second < MAX_ACCESS_COUNT)
            access_blocks_llc_krn[it->second]++;
    }
    for(int i = 0; i < MAX_ACCESS_COUNT; i++) {
        fprintf(access_blocks_csv_llc_krn, "%d,%" PRIu64 "\n", i, access_blocks_llc_krn[i]);
    }
    fclose(access_blocks_csv_llc_krn);

    // user access count
    for(auto it = access_count_llc_usr.begin(); it != access_count_llc_usr.end(); ++it) {
        if (it->second < MAX_ACCESS_COUNT)
            access_blocks_llc_usr[it->second]++;
    }
    for(int i = 0; i < MAX_ACCESS_COUNT; i++) {
        fprintf(access_blocks_csv_llc_usr, "%d,%" PRIu64 "\n", i, access_blocks_llc_usr[i]);
    }
    fclose(access_blocks_csv_llc_usr);
#endif

#ifdef MISSES_COUNT_LLC
    // kernel misses count
    for(auto it = misses_count_llc_krn.begin(); it != misses_count_llc_krn.end(); ++it) {
        if (it->second < MAX_MISSES_COUNT)
            misses_blocks_llc_krn[it->second]++;
    }
    for(int i = 0; i < MAX_MISSES_COUNT; i++) {
        fprintf(misses_blocks_csv_llc_krn, "%d,%" PRIu64 "\n", i, misses_blocks_llc_krn[i]);
    }
    fclose(misses_blocks_csv_llc_krn);

    // user misses count
    for(auto it = misses_count_llc_usr.begin(); it != misses_count_llc_usr.end(); ++it) {
        if (it->second < MAX_MISSES_COUNT)
            misses_blocks_llc_usr[it->second]++;
    }
    for(int i = 0; i < MAX_MISSES_COUNT; i++) {
        fprintf(misses_blocks_csv_llc_usr, "%d,%" PRIu64 "\n", i, misses_blocks_llc_usr[i]);
    }
    fclose(misses_blocks_csv_llc_usr);
#endif

#ifdef REUSE_LLC
    for(int i = 0; i < MAX_REUSE_DIST; i++) {
        fprintf(reuse_csv_krn_llc, "%d,%" PRIu64 "\n", i, reuse_dist_krn_llc[i]);
        fprintf(reuse_csv_usr_llc, "%d,%" PRIu64 "\n", i, reuse_dist_usr_llc[i]);
    }
    fclose(reuse_csv_krn_llc);
    fclose(reuse_csv_usr_llc);
#endif

#ifdef TRACE_LLC
    fclose(outfile_llc);
#endif
}
